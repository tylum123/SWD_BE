// <auto-generated />
using System;
using Everwell.DAL.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Everwell.DAL.Migrations
{
    [DbContext(typeof(EverwellDbContext))]
    [Migration("20250605142524_updatedappointmentv2")]
    partial class updatedappointmentv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("EverWellDB_v1")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid")
                        .HasColumnName("consultant_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("shift_slot");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointment", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.ConsultantSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid")
                        .HasColumnName("consultant_id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<int>("ShiftSlot")
                        .HasColumnType("integer")
                        .HasColumnName("shift_slot");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date")
                        .HasColumnName("work_date");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ConsultantId", "WorkDate", "ShiftSlot")
                        .IsUnique();

                    b.ToTable("ConsultantSchedule", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid")
                        .HasColumnName("consultant_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Feedback", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.MenstrualCycleNotification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("Phase")
                        .HasColumnType("integer")
                        .HasColumnName("phase");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<Guid>("TrackingId")
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.HasKey("NotificationId");

                    b.HasIndex("TrackingId");

                    b.ToTable("MenstrualCycleNotification", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.MenstrualCycleTracking", b =>
                {
                    b.Property<Guid>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("CycleEndDate")
                        .HasColumnType("date")
                        .HasColumnName("cycle_end_date");

                    b.Property<DateTime>("CycleStartDate")
                        .HasColumnType("date")
                        .HasColumnName("cycle_start_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<bool>("NotificationEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("notification_enabled");

                    b.Property<int?>("NotifyBeforeDays")
                        .HasColumnType("integer")
                        .HasColumnName("notify_before_days");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text")
                        .HasColumnName("symptoms");

                    b.HasKey("TrackingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("MenstrualCycleTracking", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("PostCategory");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("PostStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Post", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text")
                        .HasColumnName("answer_text");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_at");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid")
                        .HasColumnName("consultant_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("QuestionId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Questions", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.STITesting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("appointment_id");

                    b.Property<DateOnly?>("CollectedDate")
                        .HasColumnType("date")
                        .HasColumnName("collected_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("Method")
                        .HasColumnType("integer")
                        .HasColumnName("method");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TestType")
                        .HasColumnType("integer")
                        .HasColumnName("test_type");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("STITesting", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Service", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ExaminedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("examined_at");

                    b.Property<string>("ResultData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result_data");

                    b.Property<Guid>("STITestingId")
                        .HasColumnType("uuid")
                        .HasColumnName("sti_testing_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("STITestingId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("TestResults", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("Users", "EverWellDB_v1");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Appointment", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.ConsultantSchedule", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Feedback", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.MenstrualCycleNotification", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.MenstrualCycleTracking", "Tracking")
                        .WithMany("Notifications")
                        .HasForeignKey("TrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.MenstrualCycleTracking", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Post", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.User", "Staff")
                        .WithMany("Posts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.Question", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.STITesting", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.User", "Customer")
                        .WithMany("STITests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.TestResult", b =>
                {
                    b.HasOne("Everwell.DAL.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Everwell.DAL.Data.Entities.STITesting", "STITesting")
                        .WithMany("TestResults")
                        .HasForeignKey("STITestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Everwell.DAL.Data.Entities.User", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Everwell.DAL.Data.Entities.User", null)
                        .WithMany("TestResultsExamined")
                        .HasForeignKey("UserId");

                    b.HasOne("Everwell.DAL.Data.Entities.User", null)
                        .WithMany("TestResultsSent")
                        .HasForeignKey("UserId1");

                    b.Navigation("Customer");

                    b.Navigation("STITesting");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.MenstrualCycleTracking", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.STITesting", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("Everwell.DAL.Data.Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("STITests");

                    b.Navigation("TestResultsExamined");

                    b.Navigation("TestResultsSent");
                });
#pragma warning restore 612, 618
        }
    }
}
