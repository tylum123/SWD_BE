using AutoMapper;
using Everwell.DAL.Data.Entities;
using Everwell.DAL.Data.Requests.Appointments;
using Everwell.DAL.Data.Responses.Appointments;
using Everwell.DAL.Data.Responses.User;

namespace Everwell.DAL.Mappers
{
    /// <summary>
    /// AutoMapper profile for mapping between appointment-related requests and responses.
    /// </summary>
    /// <remarks>
    /// This class defines the mappings between CreateAppointmentRequest and Appointment,
    /// as well as between Appointment and CreateAppointmentsResponse.
    /// It also includes mappings for User to GetUserResponse for customer and consultant details.
    /// </remarks>;

    public class AppointmentMapper : Profile
    {
        public AppointmentMapper()
        {
            // CreateAppointmentRequest to Appointment
            CreateMap<CreateAppointmentRequest, Appointment>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id will be generated by the database
                .ForMember(dest => dest.CustomerId, opt => opt.MapFrom(src => src.CustomerId))
                .ForMember(dest => dest.ConsultantId, opt => opt.MapFrom(src => src.ConsultantId))
                // .ForMember(dest => dest.ServiceId, opt => opt.MapFrom(src => src.ServiceId))
                .ForMember(dest => dest.AppointmentDate,
                    opt => opt.MapFrom(src => src.AppointmentDate))
                .ForMember(dest => dest.Slot, opt => opt.MapFrom(src => src.Slot))
                .ForMember(dest => dest.Notes, opt => opt.MapFrom(src => src.Notes))
                .ForMember(dest => dest.Customer, opt => opt.Ignore()) // Don't map navigation properties
                .ForMember(dest => dest.Consultant, opt => opt.Ignore()); // Don't map navigation properties
                // .ForMember(dest => dest.Service, opt => opt.Ignore()); // Don't map navigation properties

            // UpdateAppointmentRequest to Appointment
            CreateMap<UpdateAppointmentRequest, Appointment>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Don't update the ID
                .ForMember(dest => dest.CustomerId, opt => opt.Ignore())
                .ForMember(dest => dest.ConsultantId, opt => opt.Ignore())
                // .ForMember(dest => dest.ServiceId, opt => opt.Ignore())
                .ForMember(dest => dest.AppointmentDate,
                    opt => opt.MapFrom(src => src.AppointmentDate))
                .ForMember(dest => dest.Slot, opt => opt.MapFrom(src => src.Slot))
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status))
                .ForMember(dest => dest.Notes, opt => opt.MapFrom(src => src.Notes));
            
            // Appointment to CreateAppointmentsResponse
            CreateMap<Appointment, CreateAppointmentsResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id)) 
                .ForMember(dest => dest.CustomerId, opt => opt.MapFrom(src => src.CustomerId))
                .ForMember(dest => dest.Customer, opt => opt.MapFrom(src => src.Customer))
                .ForMember(dest => dest.ConsultantId, opt => opt.MapFrom(src => src.ConsultantId))
                .ForMember(dest => dest.Consultant, opt => opt.MapFrom(src => src.Consultant))
                // .ForMember(dest => dest.ServiceId, opt => opt.MapFrom(src => src.ServiceId))
                .ForMember(dest => dest.AppointmentDate, opt => opt.MapFrom(src => src.AppointmentDate))
                .ForMember(dest => dest.Slot, opt => opt.MapFrom(src => src.Slot))
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status))
                .ForMember(dest => dest.Notes, opt => opt.MapFrom(src => src.Notes))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt));

            // User to GetUserResponse (needed for mapping Customer and Consultant)
            CreateMap<User, GetUserResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
                .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.PhoneNumber))
                .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Address))
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role.Name))
                .ForMember(dest => dest.AvatarUrl, opt => opt.MapFrom(src => src.AvatarUrl));
                // .ForMember(dest => dest.IsActive, opt => opt.Ignore());
            
            // Appointment to GetAppointmentConsultantResponse
            CreateMap<Appointment, GetAppointmentConsultantResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.CustomerId, opt => opt.MapFrom(src => src.CustomerId))
                .ForMember(dest => dest.Customer, opt => opt.MapFrom(src => src.Customer))
                // .ForMember(dest => dest.ServiceId, opt => opt.MapFrom(src => src.ServiceId))
                .ForMember(dest => dest.AppointmentDate, opt => opt.MapFrom(src => src.AppointmentDate))
                .ForMember(dest => dest.Slot, opt => opt.MapFrom(src => src.Slot))
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status))
                .ForMember(dest => dest.Notes, opt => opt.MapFrom(src => src.Notes))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt));
            
            // Appointment to DeleteAppointmentResponse
            CreateMap<Appointment, DeleteAppointmentResponse>()
                .ConstructUsing(_ => new DeleteAppointmentResponse()) // Force use of default constructor
                .ForMember(dest => dest.AppointmentId, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.IsDeleted, opt => opt.Ignore()) // Set this in your service logic
                .ForMember(dest => dest.Message, opt => opt.Ignore());  // Set this in your service logic

            // CreateScheduleRequest to ConsultantSchedule
            CreateMap<CreateScheduleRequest, ConsultantSchedule>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id will be generated by the database
                .ForMember(dest => dest.ConsultantId, opt => opt.MapFrom(src => src.ConsultantId))
                .ForMember(dest => dest.WorkDate, opt => opt.MapFrom(src => src.WorkDate))
                .ForMember(dest => dest.Slot, opt => opt.MapFrom(src => src.Slot))
                .ForMember(dest => dest.IsAvailable, opt => opt.MapFrom(src => src.IsAvailable))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.Now));

            // ConsultantSchedule to GetScheduleResponse
            CreateMap<ConsultantSchedule, GetScheduleResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.ConsultantId, opt => opt.MapFrom(src => src.ConsultantId))
                .ForMember(dest => dest.Consultant, opt => opt.MapFrom(src => src.Consultant))
                .ForMember(dest => dest.WorkDate, opt => opt.MapFrom(src => src.WorkDate))
                .ForMember(dest => dest.Slot, opt => opt.MapFrom(src => src.Slot))
                .ForMember(dest => dest.IsAvailable, opt => opt.MapFrom(src => src.IsAvailable))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt));


        }
    }
}